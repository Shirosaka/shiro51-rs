#![allow(dead_code)]

use num_enum::{IntoPrimitive, TryFromPrimitive};

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, TryFromPrimitive, IntoPrimitive)]
#[repr(u8)]
pub enum Instruction {
    NOP = 0x00,
    AJMP1 = 0x01,
    LJMP = 0x02,
    RR_A = 0x03,
    INC_A = 0x04,
    INC_DATA = 0x05,
    INC_INDIRECT_R0 = 0x06,
    INC_INDIRECT_R1 = 0x07,
    INC_R0 = 0x08,
    INC_R1 = 0x09,
    INC_R2 = 0x0a,
    INC_R3 = 0x0b,
    INC_R4 = 0x0c,
    INC_R5 = 0x0d,
    INC_R6 = 0x0e,
    INC_R7 = 0x0f,
    JBC_BIT_ADDR = 0x10,
    ACALL1 = 0x11,
    LCALL = 0x12,
    RRC_A = 0x13,
    DEC_A = 0x14,
    DEC_ADDR = 0x15,
    DEC_INDIRECT_R0 = 0x16,
    DEC_INDIRECT_R1 = 0x17,
    DEC_R0 = 0x18,
    DEC_R1 = 0x19,
    DEC_R2 = 0x1a,
    DEC_R3 = 0x1b,
    DEC_R4 = 0x1c,
    DEC_R5 = 0x1d,
    DEC_R6 = 0x1e,
    DEC_R7 = 0x1f,
    JB_BIT_CODE = 0x20,
    AJMP2 = 0x21,
    RET = 0x22,
    RL_A = 0x23,
    ADD_A_CONST = 0x24,
    ADD_A_DATA = 0x25,
    ADD_A_INDIRECT_R0 = 0x26,
    ADD_A_INDIRECT_R1 = 0x27,
    ADD_A_R0 = 0x28,
    ADD_A_R1 = 0x29,
    ADD_A_R2 = 0x2a,
    ADD_A_R3 = 0x2b,
    ADD_A_R4 = 0x2c,
    ADD_A_R5 = 0x2d,
    ADD_A_R6 = 0x2e,
    ADD_A_R7 = 0x2f,
    JNB_BIT_CODE = 0x30,
    ACALL2 = 0x31,
    RETI = 0x32,
    RLC_A = 0x33,
    ADDC_A_CONST = 0x34,
    ADDC_A_DATA = 0x35,
    ADDC_A_INDIRECT_R0 = 0x36,
    ADDC_A_INDIRECT_R1 = 0x37,
    ADDC_A_R0 = 0x38,
    ADDC_A_R1 = 0x39,
    ADDC_A_R2 = 0x3a,
    ADDC_A_R3 = 0x3b,
    ADDC_A_R4 = 0x3c,
    ADDC_A_R5 = 0x3d,
    ADDC_A_R6 = 0x3e,
    ADDC_A_R7 = 0x3f,
    JC = 0x40,
    AJMP3 = 0x41,
    ORL_DATA_A = 0x42,
    ORL_DATA_CONST = 0x43,
    ORL_A_CONST = 0x44,
    ORL_A_DATA = 0x45,
    ORL_A_INDIRECT_R0 = 0x46,
    ORL_A_INDIRECT_R1 = 0x47,
    ORL_A_R0 = 0x48,
    ORL_A_R1 = 0x49,
    ORL_A_R2 = 0x4a,
    ORL_A_R3 = 0x4b,
    ORL_A_R4 = 0x4c,
    ORL_A_R5 = 0x4d,
    ORL_A_R6 = 0x4e,
    ORL_A_R7 = 0x4f,
    JNC = 0x50,
    ACALL3 = 0x51,
    ANL_DATA_A = 0x52,
    ANL_DATA_CONST = 0x53,
    ANL_A_CONST = 0x54,
    ANL_A_DATA = 0x55,
    ANL_A_INDIRECT_R0 = 0x56,
    ANL_A_INDIRECT_R1 = 0x57,
    ANL_A_R0 = 0x58,
    ANL_A_R1 = 0x59,
    ANL_A_R2 = 0x5a,
    ANL_A_R3 = 0x5b,
    ANL_A_R4 = 0x5c,
    ANL_A_R5 = 0x5d,
    ANL_A_R6 = 0x5e,
    ANL_A_R7 = 0x5f,
    JZ = 0x60,
    AJMP4 = 0x61,
    XRL_DATA_A = 0x62,
    XRL_DATA_CONST = 0x63,
    XRL_A_CONST = 0x64,
    XRL_A_DATA = 0x65,
    XRL_A_INDIRECT_R0 = 0x66,
    XRL_A_INDIRECT_R1 = 0x67,
    XRL_A_R0 = 0x68,
    XRL_A_R1 = 0x69,
    XRL_A_R2 = 0x6a,
    XRL_A_R3 = 0x6b,
    XRL_A_R4 = 0x6c,
    XRL_A_R5 = 0x6d,
    XRL_A_R6 = 0x6e,
    XRL_A_R7 = 0x6f,
    JNZ = 0x70,
    ACALL4 = 0x71,
    ORL_C_BIT = 0x72,
    JMP = 0x73,
    MOV_A_CONST = 0x74,
    MOV_DATA_CONST = 0x75,
    MOV_INDIRECT_R0_CONST = 0x76,
    MOV_INDIRECT_R1_CONST = 0x77,
    MOV_R0_CONST = 0x78,
    MOV_R1_CONST = 0x79,
    MOV_R2_CONST = 0x7a,
    MOV_R3_CONST = 0x7b,
    MOV_R4_CONST = 0x7c,
    MOV_R5_CONST = 0x7d,
    MOV_R6_CONST = 0x7e,
    MOV_R7_CONST = 0x7f,
    SJMP = 0x80,
    AJMP5 = 0x81,
    ANL_C_BIT = 0x82,
    /// Asm: MOVC A, @A+PC
    MOVC_A_INDIRECT_A_PC = 0x83,
    DIV_AB = 0x84,
    MOV_DATA_DATA = 0x85,
    MOV_DATA_INDIRECT_R0 = 0x86,
    MOV_DATA_INDIRECT_R1 = 0x87,
    MOV_DATA_R0 = 0x88,
    MOV_DATA_R1 = 0x89,
    MOV_DATA_R2 = 0x8a,
    MOV_DATA_R3 = 0x8b,
    MOV_DATA_R4 = 0x8c,
    MOV_DATA_R5 = 0x8d,
    MOV_DATA_R6 = 0x8e,
    MOV_DATA_R7 = 0x8f,
    MOV_DPTR_CONST = 0x90,
    ACALL5 = 0x91,
    MOV_BIT_C = 0x92,
    MOVC_A_INDIRECT_A_DPTR = 0x93,
    SUBB_A_CONST = 0x94,
    SUBB_A_DATA = 0x95,
    SUBB_A_INDIRECT_R0 = 0x96,
    SUBB_A_INDIRECT_R1 = 0x97,
    SUBB_A_R0 = 0x98,
    SUBB_A_R1 = 0x99,
    SUBB_A_R2 = 0x9a,
    SUBB_A_R3 = 0x9b,
    SUBB_A_R4 = 0x9c,
    SUBB_A_R5 = 0x9d,
    SUBB_A_R6 = 0x9e,
    SUBB_A_R7 = 0x9f,
    ORL_C_COMPLEMENT_BIT = 0xa0,
    AJMP6 = 0xa1,
    MOV_C_BIT = 0xa2,
    INC_DPTR = 0xa3,
    MUL_AB = 0xa4,
    // 0xa5 => reserved
    /// Asm: MOV @R0, data addr
    MOV_INDIRECT_R0_DATA = 0xa6,
    MOV_INDIRECT_R1_DATA = 0xa7,
    MOV_R0_DATA = 0xa8,
    MOV_R1_DATA = 0xa9,
    MOV_R2_DATA = 0xaa,
    MOV_R3_DATA = 0xab,
    MOV_R4_DATA = 0xac,
    MOV_R5_DATA = 0xad,
    MOV_R6_DATA = 0xae,
    MOV_R7_DATA = 0xaf,
    ANL_C_COMPLEMENT_BIT = 0xb0,
    ACALL6 = 0xb1,
    CPL_BIT = 0xb2,
    CPL_C = 0xb3,
    CJNE_A_CONST_CODE = 0xb4,
    CJNE_A_DATA_CODE = 0xb5,
    CJNE_INDIRECT_R0_CONST_CODE = 0xb6,
    CJNE_INDIRECT_R1_CONST_CODE = 0xb7,
    CJNE_R0_CONST_CODE = 0xb8,
    CJNE_R1_CONST_CODE = 0xb9,
    CJNE_R2_CONST_CODE = 0xba,
    CJNE_R3_CONST_CODE = 0xbb,
    CJNE_R4_CONST_CODE = 0xbc,
    CJNE_R5_CONST_CODE = 0xbd,
    CJNE_R6_CONST_CODE = 0xbe,
    CJNE_R7_CONST_CODE = 0xbf,
    PUSH_DATA = 0xc0,
    AJMP7 = 0xc1,
    CLR_BIT = 0xc2,
    CLR_C = 0xc3,
    SWAP_A = 0xc4,
    XCH_A_DATA = 0xc5,
    XCH_A_INDIRECT_R0 = 0xc6,
    XCH_A_INDIRECT_R1 = 0xc7,
    XCH_A_R0 = 0xc8,
    XCH_A_R1 = 0xc9,
    XCH_A_R2 = 0xca,
    XCH_A_R3 = 0xcb,
    XCH_A_R4 = 0xcc,
    XCH_A_R5 = 0xcd,
    XCH_A_R6 = 0xce,
    XCH_A_R7 = 0xcf,
    POP_DATA = 0xd0,
    ACALL7 = 0xd1,
    SETB_BIT = 0xd2,
    SETB_C = 0xd3,
    DA_A = 0xd4,
    DJNZ_DATA_CODE = 0xd5,
    XCHD_A_INDIRECT_R0 = 0xd6,
    XCHD_A_INDIRECT_R1 = 0xd7,
    DJNZ_R0_CODE = 0xd8,
    DJNZ_R1_CODE = 0xd9,
    DJNZ_R2_CODE = 0xda,
    DJNZ_R3_CODE = 0xdb,
    DJNZ_R4_CODE = 0xdc,
    DJNZ_R5_CODE = 0xdd,
    DJNZ_R6_CODE = 0xde,
    DJNZ_R7_CODE = 0xdf,
    MOVX_A_INDIRECT_DPTR = 0xe0,
    AJMP8 = 0xe1,
    MOVX_A_INDIRECT_R0 = 0xe2,
    MOVX_A_INDIRECT_R1 = 0xe3,
    CLR_A = 0xe4,
    MOV_A_DATA = 0xe5,
    MOV_A_INDIRECT_R0 = 0xe6,
    MOV_A_INDIRECT_R1 = 0xe7,
    MOV_A_R0 = 0xe8,
    MOV_A_R1 = 0xe9,
    MOV_A_R2 = 0xea,
    MOV_A_R3 = 0xeb,
    MOV_A_R4 = 0xec,
    MOV_A_R5 = 0xed,
    MOV_A_R6 = 0xee,
    MOV_A_R7 = 0xef,
    /// MOVX @DPTR,A
    MOVX_INDIRECT_DPTR_A = 0xf0,
    ACALL8 = 0xf1,
    MOVX_INDIRECT_R0_A = 0xf2,
    MOVX_INDIRECT_R1_A = 0xf3,
    CPL_A = 0xf4,
    MOV_DATA_A = 0xf5,
    MOV_INDIRECT_R0_A = 0xf6,
    MOV_INDIRECT_R1_A = 0xf7,
    MOV_R0_A = 0xf8,
    MOV_R1_A = 0xf9,
    MOV_R2_A = 0xfa,
    MOV_R3_A = 0xfb,
    MOV_R4_A = 0xfc,
    MOV_R5_A = 0xfd,
    MOV_R6_A = 0xfe,
    MOV_R7_A = 0xff,
}

impl Instruction {
    pub fn get_num_bytes(insn: &Instruction) -> usize {
        match insn {
            Instruction::NOP => 1,
            Instruction::AJMP1 => 2,
            Instruction::LJMP => 3,
            Instruction::RR_A => 1,
            Instruction::INC_A => 1,
            Instruction::INC_DATA => 2,
            Instruction::INC_INDIRECT_R0 => 1,
            Instruction::INC_INDIRECT_R1 => 1,
            Instruction::INC_R0 => 1,
            Instruction::INC_R1 => 1,
            Instruction::INC_R2 => 1,
            Instruction::INC_R3 => 1,
            Instruction::INC_R4 => 1,
            Instruction::INC_R5 => 1,
            Instruction::INC_R6 => 1,
            Instruction::INC_R7 => 1,
            Instruction::JBC_BIT_ADDR => 3,
            Instruction::ACALL1 => 2,
            Instruction::LCALL => 3,
            Instruction::RRC_A => 1,
            Instruction::DEC_A => 1,
            Instruction::DEC_ADDR => 2,
            Instruction::DEC_INDIRECT_R0 => 1,
            Instruction::DEC_INDIRECT_R1 => 1,
            Instruction::DEC_R0 => 1,
            Instruction::DEC_R1 => 1,
            Instruction::DEC_R2 => 1,
            Instruction::DEC_R3 => 1,
            Instruction::DEC_R4 => 1,
            Instruction::DEC_R5 => 1,
            Instruction::DEC_R6 => 1,
            Instruction::DEC_R7 => 1,
            Instruction::JB_BIT_CODE => 3,
            Instruction::AJMP2 => 2,
            Instruction::RET => 1,
            Instruction::RL_A => 1,
            Instruction::ADD_A_CONST => 2,
            Instruction::ADD_A_DATA => 2,
            Instruction::ADD_A_INDIRECT_R0 => 1,
            Instruction::ADD_A_INDIRECT_R1 => 1,
            Instruction::ADD_A_R0 => 1,
            Instruction::ADD_A_R1 => 1,
            Instruction::ADD_A_R2 => 1,
            Instruction::ADD_A_R3 => 1,
            Instruction::ADD_A_R4 => 1,
            Instruction::ADD_A_R5 => 1,
            Instruction::ADD_A_R6 => 1,
            Instruction::ADD_A_R7 => 1,
            Instruction::JNB_BIT_CODE => 3,
            Instruction::ACALL2 => 2,
            Instruction::RETI => 1,
            Instruction::RLC_A => 1,
            Instruction::ADDC_A_CONST => 2,
            Instruction::ADDC_A_DATA => 2,
            Instruction::ADDC_A_INDIRECT_R0 => 1,
            Instruction::ADDC_A_INDIRECT_R1 => 1,
            Instruction::ADDC_A_R0 => 1,
            Instruction::ADDC_A_R1 => 1,
            Instruction::ADDC_A_R2 => 1,
            Instruction::ADDC_A_R3 => 1,
            Instruction::ADDC_A_R4 => 1,
            Instruction::ADDC_A_R5 => 1,
            Instruction::ADDC_A_R6 => 1,
            Instruction::ADDC_A_R7 => 1,
            Instruction::JC => 2,
            Instruction::AJMP3 => 2,
            Instruction::ORL_DATA_A => 2,
            Instruction::ORL_DATA_CONST => 3,
            Instruction::ORL_A_CONST => 2,
            Instruction::ORL_A_DATA => 2,
            Instruction::ORL_A_INDIRECT_R0 => 1,
            Instruction::ORL_A_INDIRECT_R1 => 1,
            Instruction::ORL_A_R0 => 1,
            Instruction::ORL_A_R1 => 1,
            Instruction::ORL_A_R2 => 1,
            Instruction::ORL_A_R3 => 1,
            Instruction::ORL_A_R4 => 1,
            Instruction::ORL_A_R5 => 1,
            Instruction::ORL_A_R6 => 1,
            Instruction::ORL_A_R7 => 1,
            Instruction::JNC => 2,
            Instruction::ACALL3 => 2,
            Instruction::ANL_DATA_A => 2,
            Instruction::ANL_DATA_CONST => 3,
            Instruction::ANL_A_CONST => 2,
            Instruction::ANL_A_DATA => 2,
            Instruction::ANL_A_INDIRECT_R0 => 1,
            Instruction::ANL_A_INDIRECT_R1 => 1,
            Instruction::ANL_A_R0 => 1,
            Instruction::ANL_A_R1 => 1,
            Instruction::ANL_A_R2 => 1,
            Instruction::ANL_A_R3 => 1,
            Instruction::ANL_A_R4 => 1,
            Instruction::ANL_A_R5 => 1,
            Instruction::ANL_A_R6 => 1,
            Instruction::ANL_A_R7 => 1,
            Instruction::JZ => 2,
            Instruction::AJMP4 => 2,
            Instruction::XRL_DATA_A => 2,
            Instruction::XRL_DATA_CONST => 3,
            Instruction::XRL_A_CONST => 2,
            Instruction::XRL_A_DATA => 2,
            Instruction::XRL_A_INDIRECT_R0 => 2,
            Instruction::XRL_A_INDIRECT_R1 => 2,
            Instruction::XRL_A_R0 => 1,
            Instruction::XRL_A_R1 => 1,
            Instruction::XRL_A_R2 => 1,
            Instruction::XRL_A_R3 => 1,
            Instruction::XRL_A_R4 => 1,
            Instruction::XRL_A_R5 => 1,
            Instruction::XRL_A_R6 => 1,
            Instruction::XRL_A_R7 => 1,
            Instruction::JNZ => 2,
            Instruction::ACALL4 => 2,
            Instruction::ORL_C_BIT => 2,
            Instruction::JMP => 1,
            Instruction::MOV_A_CONST => 2,
            Instruction::MOV_DATA_CONST => 3,
            Instruction::MOV_INDIRECT_R0_CONST => 2,
            Instruction::MOV_INDIRECT_R1_CONST => 2,
            Instruction::MOV_R0_CONST => 2,
            Instruction::MOV_R1_CONST => 2,
            Instruction::MOV_R2_CONST => 2,
            Instruction::MOV_R3_CONST => 2,
            Instruction::MOV_R4_CONST => 2,
            Instruction::MOV_R5_CONST => 2,
            Instruction::MOV_R6_CONST => 2,
            Instruction::MOV_R7_CONST => 2,
            Instruction::SJMP => 2,
            Instruction::AJMP5 => 2,
            Instruction::ANL_C_BIT => 2,
            Instruction::MOVC_A_INDIRECT_A_PC => 1,
            Instruction::DIV_AB => 1,
            Instruction::MOV_DATA_DATA => 3,
            Instruction::MOV_DATA_INDIRECT_R0 => 2,
            Instruction::MOV_DATA_INDIRECT_R1 => 2,
            Instruction::MOV_DATA_R0 => 2,
            Instruction::MOV_DATA_R1 => 2,
            Instruction::MOV_DATA_R2 => 2,
            Instruction::MOV_DATA_R3 => 2,
            Instruction::MOV_DATA_R4 => 2,
            Instruction::MOV_DATA_R5 => 2,
            Instruction::MOV_DATA_R6 => 2,
            Instruction::MOV_DATA_R7 => 2,
            Instruction::MOV_DPTR_CONST => 3,
            Instruction::ACALL5 => 2,
            Instruction::MOV_BIT_C => 2,
            Instruction::MOVC_A_INDIRECT_A_DPTR => 1,
            Instruction::SUBB_A_CONST => 2,
            Instruction::SUBB_A_DATA => 2,
            Instruction::SUBB_A_INDIRECT_R0 => 1,
            Instruction::SUBB_A_INDIRECT_R1 => 1,
            Instruction::SUBB_A_R0 => 1,
            Instruction::SUBB_A_R1 => 1,
            Instruction::SUBB_A_R2 => 1,
            Instruction::SUBB_A_R3 => 1,
            Instruction::SUBB_A_R4 => 1,
            Instruction::SUBB_A_R5 => 1,
            Instruction::SUBB_A_R6 => 1,
            Instruction::SUBB_A_R7 => 1,
            Instruction::ORL_C_COMPLEMENT_BIT => 2,
            Instruction::AJMP6 => 2,
            Instruction::MOV_C_BIT => 2,
            Instruction::INC_DPTR => 1,
            Instruction::MUL_AB => 1,
            Instruction::MOV_INDIRECT_R0_DATA => 2,
            Instruction::MOV_INDIRECT_R1_DATA => 2,
            Instruction::MOV_R0_DATA => 2,
            Instruction::MOV_R1_DATA => 2,
            Instruction::MOV_R2_DATA => 2,
            Instruction::MOV_R3_DATA => 2,
            Instruction::MOV_R4_DATA => 2,
            Instruction::MOV_R5_DATA => 2,
            Instruction::MOV_R6_DATA => 2,
            Instruction::MOV_R7_DATA => 2,
            Instruction::ANL_C_COMPLEMENT_BIT => 2,
            Instruction::ACALL6 => 2,
            Instruction::CPL_BIT => 2,
            Instruction::CPL_C => 1,
            Instruction::CJNE_A_CONST_CODE => 3,
            Instruction::CJNE_A_DATA_CODE => 3,
            Instruction::CJNE_INDIRECT_R0_CONST_CODE => 3,
            Instruction::CJNE_INDIRECT_R1_CONST_CODE => 3,
            Instruction::CJNE_R0_CONST_CODE => 3,
            Instruction::CJNE_R1_CONST_CODE => 3,
            Instruction::CJNE_R2_CONST_CODE => 3,
            Instruction::CJNE_R3_CONST_CODE => 3,
            Instruction::CJNE_R4_CONST_CODE => 3,
            Instruction::CJNE_R5_CONST_CODE => 3,
            Instruction::CJNE_R6_CONST_CODE => 3,
            Instruction::CJNE_R7_CONST_CODE => 3,
            Instruction::PUSH_DATA => 2,
            Instruction::AJMP7 => 2,
            Instruction::CLR_BIT => 2,
            Instruction::CLR_C => 1,
            Instruction::SWAP_A => 1,
            Instruction::XCH_A_DATA => 2,
            Instruction::XCH_A_INDIRECT_R0 => 1,
            Instruction::XCH_A_INDIRECT_R1 => 1,
            Instruction::XCH_A_R0 => 1,
            Instruction::XCH_A_R1 => 1,
            Instruction::XCH_A_R2 => 1,
            Instruction::XCH_A_R3 => 1,
            Instruction::XCH_A_R4 => 1,
            Instruction::XCH_A_R5 => 1,
            Instruction::XCH_A_R6 => 1,
            Instruction::XCH_A_R7 => 1,
            Instruction::POP_DATA => 2,
            Instruction::ACALL7 => 2,
            Instruction::SETB_BIT => 2,
            Instruction::SETB_C => 1,
            Instruction::DA_A => 1,
            Instruction::DJNZ_DATA_CODE => 3,
            Instruction::XCHD_A_INDIRECT_R0 => 1,
            Instruction::XCHD_A_INDIRECT_R1 => 1,
            Instruction::DJNZ_R0_CODE => 2,
            Instruction::DJNZ_R1_CODE => 2,
            Instruction::DJNZ_R2_CODE => 2,
            Instruction::DJNZ_R3_CODE => 2,
            Instruction::DJNZ_R4_CODE => 2,
            Instruction::DJNZ_R5_CODE => 2,
            Instruction::DJNZ_R6_CODE => 2,
            Instruction::DJNZ_R7_CODE => 2,
            Instruction::MOVX_A_INDIRECT_DPTR => 1,
            Instruction::AJMP8 => 2,
            Instruction::MOVX_A_INDIRECT_R0 => 1,
            Instruction::MOVX_A_INDIRECT_R1 => 1,
            Instruction::CLR_A => 1,
            Instruction::MOV_A_DATA => 2,
            Instruction::MOV_A_INDIRECT_R0 => 1,
            Instruction::MOV_A_INDIRECT_R1 => 1,
            Instruction::MOV_A_R0 => 1,
            Instruction::MOV_A_R1 => 1,
            Instruction::MOV_A_R2 => 1,
            Instruction::MOV_A_R3 => 1,
            Instruction::MOV_A_R4 => 1,
            Instruction::MOV_A_R5 => 1,
            Instruction::MOV_A_R6 => 1,
            Instruction::MOV_A_R7 => 1,
            Instruction::MOVX_INDIRECT_DPTR_A => 1,
            Instruction::ACALL8 => 2,
            Instruction::MOVX_INDIRECT_R0_A => 1,
            Instruction::MOVX_INDIRECT_R1_A => 1,
            Instruction::CPL_A => 1,
            Instruction::MOV_DATA_A => 2,
            Instruction::MOV_INDIRECT_R0_A => 1,
            Instruction::MOV_INDIRECT_R1_A => 1,
            Instruction::MOV_R0_A => 1,
            Instruction::MOV_R1_A => 1,
            Instruction::MOV_R2_A => 1,
            Instruction::MOV_R3_A => 1,
            Instruction::MOV_R4_A => 1,
            Instruction::MOV_R5_A => 1,
            Instruction::MOV_R6_A => 1,
            Instruction::MOV_R7_A => 1,
        }
    }

    pub fn get_instruction_encoding(insn: &Instruction) -> u8 {
        match insn {
            Instruction::NOP => 0b00000000,
            _ => todo!("Encoding for Instruction::{:?}", insn),
        }
    }
}
